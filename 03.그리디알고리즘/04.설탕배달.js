// 설탕 배달
// 상근이는 요즘 설탕공장에서 설탕을 배달하고 있다.
// 상근이는 지금 사탕가게에 설탕을 정확하게 N킬로그램을 배달해야 한다.
// 설탕공장에서 만드는 설탕은 봉지에 담겨져 있다.
// 봉지는 3킬로그램 봉지와 5킬로그램 봉지가 있다.
// 상근이는 귀찮기 때문에, 최대한 적은 봉지를 들고 가려고 한다.
// 예를 들어, 18킬로그램 설탕을 배달해야 할 때, 3킬로그램 봉지 6개를 가져가도 되지만,
// 5킬로그램 3개와 3킬로그램 1개를 배달하면, 더 적은 개수의 봉지를 배달할 수 있다.
// 상근이가 설탕을 정확하게 N킬로그램 배달해야 할 때, 봉지 몇 개를 가져가면 되는지 그 수를 구하는 프로그램을 작성하시오.

// 입력
// 첫째 줄에 N이 주어진다.

// 문제 해결 아이디어
// 현실에서 적용할 수 있는 가장 단순한 공식을 생각해보자
// 어떤 수를 0으로 만들어야 하는 상황에서 두 가지 연산을 사용할 수 있다.
// 1. 값에서 5를 빼기
// 2. 값에서 3을 빼기
// 가능하면 5를 우선적으로 빼는 것이 효과적일 것이다.
// 현재 값이 5로 나누어 떨어지는 경우, 5로 나누면 된다.
// 그렇지 않다면, 기존의 값이 5로 나누어 떨어지는 값이 될 때까지 3을 빼준 뒤에 1을 수행한다.

// 풀이
let fs = require("fs");
let input = fs.readFileSync("/dev/stdin").toString().split("\n");

let n = Number(input[0]);
let cnt = 0; // 봉지의 개수
let flag = false;

while (n >= 0) {
  // n이 0이 될 때까지 빼나갈 수 있도록
  // n이 0이 되었거나, n로 나누어 떨어지는 값인 경우
  if (n === 0 || n % 5 === 0) {
    cnt += Math.floor(n / 5); // 5로 나눈 몫을 더하기
    console.log(cnt);
    flag = true; // 정확히 n키로를 채울 수 있다는 판정
    break; // n이 0이 되면 종료될 수 있게
  }
  n -= 3;
  cnt += 1;
}

if (!flag) {
  // 정확히 n키로를 채우지 못하는 경우
  console.log(-1);
}
