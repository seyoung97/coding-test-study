// 바이러스
// 문제
// 신종 바이러스인 웜 바이러스는 네트워크를 통해 전파된다.
// 한 컴퓨터가 웜 바이러스에 걸리면 그 컴퓨터와 네트워크 상에서 연결되어 있는 모든 컴퓨터는 웜 바이러스에 걸리게 된다.
// 예를 들어 7대의 컴퓨터가 <그림 1>과 같이 네트워크 상에서 연결되어 있다고 하자.
// 1번 컴퓨터가 웜 바이러스에 걸리면 웜 바이러스는 2번과 5번 컴퓨터를 거쳐
// 3번과 6번 컴퓨터까지 전파되어 2, 3, 5, 6 네 대의 컴퓨터는 웜 바이러스에 걸리게 된다.
// 하지만 4번과 7번 컴퓨터는 1번 컴퓨터와 네트워크상에서 연결되어 있지 않기 때문에 영향을 받지 않는다.
// 어느 날 1번 컴퓨터가 웜 바이러스에 걸렸다. 컴퓨터의 수와 네트워크 상에서 서로 연결되어 있는 정보가 주어질 때,
// 1번 컴퓨터를 통해 웜 바이러스에 걸리게 되는 컴퓨터의 수를 출력하는 프로그램을 작성하시오.

// 입력
// 첫째 줄에는 컴퓨터의 수가 주어진다.
// 컴퓨터의 수는 100 이하인 양의 정수이고 각 컴퓨터에는 1번 부터 차례대로 번호가 매겨진다.
// 둘째 줄에는 네트워크 상에서 직접 연결되어 있는 컴퓨터 쌍의 수가 주어진다.
// 이어서 그 수만큼 한 줄에 한 쌍씩 네트워크 상에서 직접 연결되어 있는 컴퓨터의 번호 쌍이 주어진다.

// 문제 해결 아이디어
// 1번 노드에서 도달할 수 있는 다른 노드의 개수를 출력하는 문제다.
// DFS를 이용해 양방향 그래프에 대한 그래프 탐색을 진행할 수 있다.
// 그래프를 인접 리스트로 표현할 때, 인덱스 0은 사용하지 않도록하면 직관적이다.

// 풀이
let fs = require("fs");
let input = fs.readFileSync("/dev/stdin").toString().split("\n");

let n = Number(input[0]); // 노드의 개수
let m = Number(input[1]); // 간선의 개수
let graph = []; // 인접 리스트 만들기
for (let i = 1; i <= n; i++) graph[i] = [];
for (let i = 2; i <= m + 1; i++) {
  // m개의 줄에 걸쳐서 간선의 정보를 넣는다
  let [x, y] = input[i].split(" ").map(Number);
  graph[x].push(y); // x번 노드에서 y번 노드로 이동 가능
  graph[y].push(x); // y번 노드에서 x번 노드로 이동 가능
}

let cnt = 0;
let visited = new Array(n + 1).fill(false);
function dfs(x) {
  // 깊이 우선 탐색 수행
  visited[x] = true; // 현재 노드를 방문 처리
  cnt++; // 도달이 가능 하니까 카운트 업
  for (y of graph[x]) {
    // 현재 노드와 연결된 다른 노드를 재귀적으로 방문
    if (!visited[y]) dfs(y);
  }
}

dfs(1);
console.log(cnt - 1); // 1번 노드를 제외
